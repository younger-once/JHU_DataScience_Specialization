object.size(read.table(myfile, sep=";", header = T, nrow=1000),units="auto")
object.size(read.table(myfile, sep=";", header = T, nrow=1000))
object.size(read.table(myfile, sep=";", header = T, nrow=1000)) / 1e9
object.size(read.table(myfile, sep=";", header = T, nrow=1000))
object.size(read.table(myfile, sep=";", header = T, nrow=1000)) *10
object.size(read.table(myfile, sep=";", header = T, nrow=1000)) * 2075259/1000
object.size(read.table(myfile, sep=";", header = T, nrow=1000)) * (2075259/1000) * (1/1e9)
object.size(read.table(myfile, sep=";", header = T, nrow=1000)) * (2075259/1000) * (1/1e9)
object.size(read.table(myfile, sep=";", header = T, nrow=1000)) * (2075259/1000)
object.size(read.table(myfile, sep=";", header = T, nrow=1000) * (2075259/1000), units='GB')
object.size(read.table(myfile, sep=";", header = T, nrow=1000) * (2075259/1000), units='Gb')
object.size(read.table(myfile, sep=";", header = T, nrow=1000) * (2075259/1000),standard='legacy', units='Gb')
object.size(read.table(myfile, sep=";", header = T, nrow=1000) * (2075259/1000))
object.size(read.table(myfile, sep=";", header = T, nrow=1000))
object.size(read.table(myfile, sep=";", header = T, nrow=1000),units="Gb")
object.size(read.table(myfile, sep=";", header = T, nrow=1000),units="GB")
object.size(read.table(myfile, sep=";", header = T, nrow=1000),standard="legacy", units="GB")
object.size(read.table(myfile, sep=";", header = T, nrow=1000),standard="legacy", units="Gb")
object.size(read.table(myfile, sep=";", header = T, nrow=1000),standard="SI", units="Gb")
object.size(read.table(myfile, sep=";", header = T, nrow=1000),standard="SI", units="GB")
object.size(read.table(myfile, sep=";", header = T, nrow=1000),units="kb")
print(read.table(myfile, sep=";", header = T, nrow=1000), quote = FALSE, units = "b",
print(read.table(myfile, sep=";", header = T, nrow=1000), quote = FALSE, units = "b")
print(read.table(myfile, sep=";", header = T, nrow=1000), quote = FALSE, units = "b")
print(read.table(myfile, sep=";", header = T, nrow=1000), quote = FALSE, units = "b")
print(object.size(read.table(myfile, sep=";", header = T, nrow=1000)),units="Gb")
print(object.size(read.table(myfile, sep=";", header = T, nrow=1000)),units="Kb")
print(object.size(read.table(myfile, sep=";", header = T, nrow=1000))* (2075259/1000),units="Kb")
print(object.size(read.table(myfile, sep=";", header = T, nrow=1000))* (2075259/1000),units="Gb")
print(object.size(read.table(myfile, sep=";", header = T, nrow=1000)),units="Gb")
print(object.size(read.table(myfile, sep=";", header = T, nrow=1000)),units="b")
print(object.size(f),units="Gb")
print(object.size(f),units="Mb")
print(object.size(read.table(myfile, sep=";", header = T, nrow=1000))* (2075259/1000),units="Mb")
print(object.size(read.table(myfile, sep=";", header = T, nrow=10000))* (2075259/10000),units="Mb")
print(object.size(read.table(myfile, sep=";", header = T, nrow=100000))* (2075259/100000),units="Mb")
print(object.size(read.table(myfile, sep=";", header = T, nrow=1000000))* (2075259/1000000),units="Mb")
print(object.size(read.table(myfile, sep=";", header = T, nrow=10))* (2075259/10),units="Mb")
# print estimate of of dataframe size by extrapolating from reading first 10,000 rows
print(object.size(read.table(myfile, sep=";", header = T, nrow=10))* (2075259/10),units="Mb")
# print estimate of of dataframe size by extrapolating from reading first 10,000 rows
print(object.size(read.table(myfile, sep=";", header = T, nrow=100))* (2075259/100),units="Mb")
# print estimate of of dataframe size by extrapolating from reading first 10,000 rows
print(object.size(read.table(myfile, sep=";", header = T, nrow=1000))* (2075259/1000),units="Mb")
# print estimate of of dataframe size by extrapolating from reading first 10,000 rows
print(object.size(read.table(myfile, sep=";", header = T, nrow=10000))* (2075259/10000),units="Mb")
# print estimate of of file object size by extrapolating from reading first 10,000 rows
print(object.size(read.table(myfile, sep=";", header = T, nrow=10000))* (2075259/10000),units="Mb")
# print estimate of of file object size by extrapolating from reading first 10,000 rows
print(object.size(read.table(myfile, sep=";", header = T, nrow=100000))* (2075259/100000),units="Mb")
# print estimate of of file object size by extrapolating from reading first 100,000 rows
print(object.size(read.table(myfile, sep=";", header = T, nrow=100000))* (2075259/100000),units="Mb")
# print estimate of of file object size by extrapolating from reading first 100,000 rows: 151.5 Mb
n_total <- 2075259
n_sample <- 100000
print(object.size(read.table(myfile, sep=";", header = T, nrow=n_sample))* (n_total/n_sample),units="Mb")
# print estimate of of file object size by extrapolating from first n_sample rows: 151.5 Mb
n_total <- 2075259
n_sample <- 100000
print(object.size(read.table(myfile, sep=";", header = T, nrow=n_sample))* (n_total/n_sample),units="Mb")
n_sample <- 1
print(object.size(read.table(myfile, sep=";", header = T, nrow=n_sample))* (n_total/n_sample),units="Mb")
n_sample <- 1000
print(object.size(read.table(myfile, sep=";", header = T, nrow=n_sample))* (n_total/n_sample),units="Mb")
n_sample <- 10000
print(object.size(read.table(myfile, sep=";", header = T, nrow=n_sample))* (n_total/n_sample),units="Mb")
n_sample <- 100000
print(object.size(read.table(myfile, sep=";", header = T, nrow=n_sample))* (n_total/n_sample),units="Mb")
n_sample <- 1000000
print(object.size(read.table(myfile, sep=";", header = T, nrow=n_sample))* (n_total/n_sample),units="Mb")
n_sample <- 100000
print(object.size(read.table(myfile, sep=";", header = T, nrow=n_sample))* (n_total/n_sample),units="Mb")
# libraries
if (!require("pacman")) install.packages("pacman")
pacman::p_load(sqldf)
?read.csv.sql
names(f)
str(f)
p_load(sqldf)
pacman::p_load(sqldf)
# read on
c_class <- c('Date','Date',rep("Numeric",7))
f <- read.table(myfile, sep=";", header = T,nrows = 1000, colClasses = =c_class)
f <- read.table(myfile, sep=";", header = T,nrows = 1000, colClasses = c_class)
# read on
c_class <- c('Date','character',rep("numeric",7))
f <- read.table(myfile, sep=";", header = T,nrows = 1000, colClasses = c_class)
f
str(f)
f <- read.table(myfile, sep=";", header = T,nrows = 1000)
str(f)
str(f)
f <- read.table(myfile, sep=";", header = T,nrows = 1000)
table(f$Date)
f <- read.csv.sql(myfile, sql = "select * from file where Date IN ('01/02/2007','02/02/2007')",
colClasses = c(rep("character",2),rep("Numeric",7)))
f <- read.csv.sql(myfile, sql = "select * from file where Date IN ('01/02/2007','02/02/2007')",
colClasses = c(rep("character",2),rep("Numeric",7)))
f <- read.csv.sql(myfile, sql = "select * from file where Date IN ('01/02/2007','02/02/2007')",
colClasses = c(rep("character",2),rep("Numeric",7)))
f <- read.csv.sql(myfile, sql = "select * from file",
colClasses = c(rep("character",2),rep("Numeric",7)))
f <- read.table(myfile, sep=";", header = T,nrows = 1000)
str(f)
f <- read.csv.sql(myfile, sql = "select * from myfile where Date IN ('01/02/2007','02/02/2007')",
colClasses = c(rep("character",2),rep("Numeric",7)))
?read.csv.sql
f <- read.csv.sql(myfile, sql = "select * from file where Date ='01/02/2007'",
colClasses = c(rep("character",2),rep("Numeric",7)))
f <- read.csv.sql(myfile)
f <- read.csv.sql(myfile,nrows=1000)
f
f <- read.csv.sql(myfile, sql = "select * from file where Date =IN('01/02/2007','02/02/2007')",
sep = ";",colClasses = c(rep("character",2),rep("Numeric",7)))
f <- read.csv.sql(myfile, sql = "select * from file where Date =IN('01/02/2007','02/02/2007')",
sep = ";",colClasses = c(rep("character",2),rep("numeric",7)))
f <- read.csv.sql(myfile, sql = "select * from file where Date IN ('01/02/2007','02/02/2007')",
sep = ";",colClasses = c(rep("character",2),rep("numeric",7)))
f <- read.table(myfile, sep=";", header = T,nrows = 1000)
str(f)
# read on
c_class <- c('Date','character',rep("numeric",7))
f <- read.table(myfile, sep=";", header = T,nrows = 1000)
str(f)
?read.csv
f <- read.table(myfile, sep=";", header = T)
f %>% filter(Date = '01/02/2007')
library(dplyr)
f %>% filter(Date = '01/02/2007')
f %>% filter(Date == '01/02/2007')
table(f$Date)
f <- read.csv.sql(myfile, sql = "select * from file where Date IN ('1/2/2007','2/2/2007')",
sep = ";",colClasses = c(rep("character",2),rep("numeric",7)))
?strptime
# read in data.frame -- only bring two dates needed for analysis
f <- read.csv.sql(myfile, sql = "select * from file where Date IN ('1/2/2007','2/2/2007')",
sep = ";",colClasses = c(rep("character",2),rep("numeric",7)))
as.Date(f$Date, format = "%Y-m%-%d")
as.Date(f$Date, format = "%d/m%m%Y")
class(f$Date)
as.Date(f$Date)
head(f$Date)
as.Date(f$Date, format = "%d/%m/%Y")
pacman::p_load(sqldf,dplyr)
pacman::p_load(sqldf,dplyr,magrittr)
strptime(f$Time )
head(f$Time)
table(f$Time)
strptime(f$Time )
strptime(f$Time,format="%H:%M:%OS" )
strptime(f$Time,format="%H:%M:%S" )
table(f$Time)
strptime(f$Time,format="%H:%M:%OS" )
strptime(f$Time,format="%H:%M:%OS" )
strptime(f$Time,format="%H:%M:%S" )
strptime(f$Time,format="%H:%M:%S",usetz = F )
strptime(f$Time,format="%H:%M:%S",tz = "",usetz = F )
strptime(f$Time,format="%H:%M:%S",tz = "")
strptime(f$Time,format="%k",tz = "")
strptime(f$Time,format="%H:%M:%S")
format(strptime(f$Time,format="%H:%M:%S"),"%H:%M:%S")
table(f$Time)
format(strptime(f$Time,format="%H:%M:%S"),"%H:%M")
# convert date and time
f %<>% mutate(Date = as.Date(Date,format = "%d/%m/%Y"),
Time = format(strptime(f$Time,format="%H:%M:%S"),"%H:%M"))
class(f$Time)
class(f$Date)
strptime(f$Time,format="%H:%M:%S",tz = "")
# read in data.frame -- only bring two dates needed for analysis
f <- read.csv.sql(myfile, sql = "select * from file where Date IN ('1/2/2007','2/2/2007')",
sep = ";",colClasses = c(rep("character",2),rep("numeric",7)))
strptime(f$Time,format="%H:%M:%S")
class(strptime(f$Time,format="%H:%M:%S"))
strptime(strptime(f$Time,format="%H:%M:%S"))
(strptime(f$Time,format="%H:%M:%S"))
format(strptime(f$Time,format="%H:%M:%S"),"%H:%M")
strptime(format(strptime(f$Time,format="%H:%M:%S"),"%H:%M"),format="%H:%M")
strptime(format(strptime(f$Time,format="%H:%M:%S"),"%H:%M"),format="%H:%M")
strptime(format(strptime(f$Time,format="%H:%M:%S"),"%H:%M"),format="%H:%M")
table(f$Time)
as.Date(f$Date, format = "%d/%m/%Y")
as.Date(f$Date, format = "%d/%m/%Y")
as.Date(Date,format = "%d/%m/%Y")
as.Date(f$Date,format = "%d/%m/%Y")
as.Date(f$Date,format = "%d:%m:%Y")
as.Date(f$Date,format = "%d/%m/%Y")
as.POSIXct(paste(f$Date, f$Time), format="%d/%m/%Y %H:%M:%S")
as.POSIXct(paste(f$Date, f$Time), format="%d/%m/%Y %H:%M:%S",usetz=F)
strip.tz(as.POSIXct(paste(f$Date, f$Time), format="%d/%m/%Y %H:%M:%S"))
as.POSIXct(paste(f$Date, f$Time), format="%d/%m/%Y %H:%M:%S",tz="UTC")
as.POSIXct(paste(f$Date, f$Time), format="%d/%m/%Y %H:%M:%S",tz="UTC")
# create POSIx object datetime
f %<>% mutate(DateTime = as.POSIXct(paste(Date, Time), format="%d/%m/%Y %H:%M:%S",tz="UTC"))
f
f %>% View()
f <- read.table(myfile, sep=";", header = T)
f
which(f$Global_active_power == "?")
which(f$Global_active_power == "?" & f$Date == "1/2/2007")
which(f$Global_active_power == "?" & f$Date == "2/2/2007")
which(f$Global_active_power == "?" & f$Date == "1/2/2007")
which(f$Global_active_power == "?")
f[which(f$Global_active_power == "?"),]
f2 <-data.frame(lapply(f, function(x) gsub("?", NA, x)))
f2[6840,]
f <- read.csv.sql(myfile, sql = "select * from file where Date IN ('1/2/2007','2/2/2007')",
sep = ";")
which(f$Global_active_power == "?")
which(f$Global_reactive_power == "?")
which(f$Voltage == "?")
f %>% View()
str(f)
f <- read.csv.sql(myfile, sql = "select * from file where Date IN ('1/2/2007','2/2/2007')",
sep = ";")
str(f)
c(5,6,7,"?")
as.numeric(c()5,6,7,"?")
as.numeric(c(5,6,7,"?"))
which(f$Date == "?")
which(f$Time== "?")
# read in data.frame -- only bring two dates needed for analysis
f <- read.csv.sql(myfile, sql = "select * from file where Date IN ('1/2/2007','2/2/2007')",
sep = ";",colClasses = c(rep("character",2),rep("numeric",7)))
# create POSIX variable, DateTime
f %<>% mutate(DateTime = as.POSIXct(paste(Date, Time), format="%d/%m/%Y %H:%M:%S",tz="UTC"))
names(F)
names(f)
hist(f$Global_active_power)
hist(f$Global_active_power, col='red')
hist(f$Global_active_power, col='red', xlab="fart")
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
getwd()
axis(2, seq(0,1200,200))
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)",ylim(0,))
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, seq(0,1200,200))
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, seq(0,1200,200))
axis(2, seq(0,1200,100))
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, seq(0,1200,100))
length(plot())
length(plot
)
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, at=seq(0,1200,100))
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, at=seq(0,1200,200),labels=seq(0,1200,200))
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, at=seq(0,1200,200),labels=seq(0,1200,200))
?axis
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, at=seq(0,1200,200),labels=seq(0,1200,200))
axis(2, at=seq(0,1200,400),labels=seq(0,1200,200))
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, at=seq(0,1200,400),labels=seq(0,1200,200))
axis(2, at=seq(0,1200,400),labels=seq(0,1200,400))
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, at=seq(0,1200,400))
axis(2, at=seq(0,1200,100))
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, at=seq(0,1200,100))
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, at=seq(0,1200,600))
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
axis(2, at=seq(0,1200,400))
text(main = "fart")
dev.off()
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)")
text(main = "fart")
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)", main="Global Active Power")
axis(2, at=seq(0,1200,400))
text(main = "fart")
dev.off()
png(filename="plot1.png")
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)", main="Global Active Power")
axis(2, at=seq(0,1200,400))
dev.off()
png(filename="plot1.png",height=480,width=480)
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)", main="Global Active Power")
axis(2, at=seq(0,1200,400))
dev.off()
# plot 2
with(f,plot(DateTime, Global_active_power))
# plot 2
with(f,lines(DateTime, Global_active_power))
dev.off()
# plot 2
with(f,lines(DateTime, Global_active_power))
# plot 2
with(f,plot(DateTime, Global_active_power, type=""))
# plot 2
with(f,plot(DateTime, Global_active_power, type="o"))
dev.off()
# plot 2
with(f,plot(DateTime, Global_active_power, type="o"))
# plot 2
with(f,plot(DateTime, Global_active_power, type="S"))
# plot 2
with(f,plot(DateTime, Global_active_power, type="S",ylab="Global Active Power (kilowatts)"))
# plot 2
with(f,plot(DateTime, Global_active_power, type="s",ylab="Global Active Power (kilowatts)"))
dev.off()
# plot 2
with(f,plot(DateTime, Global_active_power, type="s",ylab="Global Active Power (kilowatts)"))
dev.off()
# plot 2
with(f,plot(DateTime, Global_active_power, type="l",ylab="Global Active Power (kilowatts)"))
dev.off()
# plot 2
with(f,plot(DateTime, Global_active_power, type="l",ylab="Global Active Power (kilowatts)"))
dev.off()
# plot 2
with(f,plot(DateTime, Global_active_power, type="l",xlab = "",ylab="Global Active Power (kilowatts)"))
# plot 2
png(filename="plot2.png",height=480,width=480)
with(f,plot(DateTime, Global_active_power, type="l",xlab = "", ylab="Global Active Power (kilowatts)"))
dev.off()
with(f,lines(DateTime,Sub_metering_1))
dev.off()
# plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l"))
with(f,lines(DateTime,Sub_metering_1), col ="red")
dev.off()
# plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l"))
with(f,lines(DateTime,Sub_metering_1), col ="red")
dev.off()
# plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l"))
with(f,lines(DateTime,Sub_metering_2), col ="red")
dev.off()
# plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
dev.off()
with(f,lines(DateTime,Sub_metering_2, col ="red"))
# plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
dev.off()
# plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright")
dev.off()
# plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"))
dev.off()
# plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1)
dev.off()
# plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l", ylab = "Energy sub metering"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1)
dev.off()
# plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l", ylab = "Energy sub metering"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1)
# plot 4
with(f,plot(DateTime, Global_active_power, type="l",xlab = "", ylab="Global Active Power (kilowatts)"))
with(f,plot(DateTime, Voltage, type="l",xlab = "datetime"))
# subplot plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l", ylab = "Energy sub metering"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1)
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="l",xlab = "datetime"))
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="s",xlab = "datetime"))
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="s",xlab = "datetime"))
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="S",xlab = "datetime"))
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="o",xlab = "datetime"))
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="l",xlab = "datetime"))
# make 2 x 2 plot
par(mfrow = c(2,2))
# subplot 1
with(f,plot(DateTime, Global_active_power, type="l",xlab = "", ylab="Global Active Power (kilowatts)"))
# subplot 2
with(f,plot(DateTime, Voltage, type="l",xlab = "datetime"))
# subplot plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l", ylab = "Energy sub metering"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1)
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="l",xlab = "datetime"))
dev.off()
# subplot plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l", ylab = "Energy sub metering"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1)
dev.off()
# make 2 x 2 plot
par(mfrow = c(2,2))
# subplot 1
with(f,plot(DateTime, Global_active_power, type="l",xlab = "", ylab="Global Active Power (kilowatts)"))
# subplot 2
with(f,plot(DateTime, Voltage, type="l",xlab = "datetime"))
# subplot plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l", ylab = "Energy sub metering"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1)
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="l",xlab = "datetime"))
dev.off()
png(filename="plot4.png",height=480,width=480)
# make 2 x 2 plot
par(mfrow = c(2,2))
# subplot 1
with(f,plot(DateTime, Global_active_power, type="l",xlab = "", ylab="Global Active Power (kilowatts)"))
# subplot 2
with(f,plot(DateTime, Voltage, type="l",xlab = "datetime"))
# subplot plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l", ylab = "Energy sub metering"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1)
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="l",xlab = "datetime"))
dev.off()
# subplot plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l", ylab = "Energy sub metering"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1, bty="n")
hist(f$Global_active_power, col='red',lwd = 2
xlab="Global Active Power (kilowatts)", main="Global Active Power")
hist(f$Global_active_power, col='red',lwd = 2,
xlab="Global Active Power (kilowatts)", main="Global Active Power")
hist(f$Global_active_power, col='red', xlab="Global Active Power (kilowatts)", main="Global Active Power")
axis(2, at=seq(0,1200,400))
with(f,plot(DateTime, Global_active_power, type="l",xlab = "", ylab="Global Active Power (kilowatts)"))
with(f,plot(DateTime, Global_active_power, type="l", lwd = 2,
xlab = "", ylab="Global Active Power (kilowatts)"))
with(f,plot(DateTime, Global_active_power, type="l", lwd = 1.5,
xlab = "", ylab="Global Active Power (kilowatts)"))
with(f,plot(DateTime, Global_active_power, type="l", lwd = 1,
xlab = "", ylab="Global Active Power (kilowatts)"))
with(f,plot(DateTime, Global_active_power, type="l", lwd = 1.75,
xlab = "", ylab="Global Active Power (kilowatts)"))
# plot 2
png(filename="plot2.png",height=480,width=480)
with(f,plot(DateTime, Global_active_power, type="l", lwd = 1.5,
xlab = "", ylab="Global Active Power (kilowatts)"))
dev.off()
# plot 2
png(filename="plot2.png",height=480,width=480)
with(f,plot(DateTime, Global_active_power, type="l", lwd = 1.25,
xlab = "", ylab="Global Active Power (kilowatts)"))
dev.off()
# subplot plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l", ylab = "Energy sub metering"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1, bty="n")
# subplot plot 3
with(f, plot(DateTime,Sub_metering_1, type = "l", lwd=1.25, ylab = "Energy sub metering"))
with(f,lines(DateTime,Sub_metering_2, col ="red"))
with(f,lines(DateTime,Sub_metering_3, col ="blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"),lty =1, bty="n")
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="l",xlab = "datetime"))
# subplot plot 4
with(f,plot(DateTime, Global_reactive_power, type="l",lwd = 1.25,xlab = "datetime"))
getwd()
getwd()
source('~/Google Drive/Documents/Learn/R_Coursera/Course4_Exploratory_Data_Analysis/ExData_Plotting1/Initial_Data_Download.R', echo=TRUE)
getwd()
